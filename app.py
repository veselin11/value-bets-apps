import streamlit as st
import pandas as pd
from datetime import date, timedelta
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

# –†–µ–∞–ª–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∫–∏
def get_real_predictions():
    return [
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Elfsborg - Molde", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ì–ì", "–ö–æ–µ—Ñ": 1.85, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚úÖ –ü–µ—á–µ–ª–∏–≤—à",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "–ò –¥–≤–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞ –ø–æ–∫–∞–∑–≤–∞—Ç –≤–∏—Å–æ–∫–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–Ω–æ—Å—Ç, –∞ Molde –±–µ–ª–µ–∂–∏ —Å—Ä–µ–¥–Ω–æ –Ω–∞–¥ 1.5 –≥–æ–ª–∞ –∫–∞—Ç–æ –≥–æ—Å—Ç."},
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "AIK - Kalmar", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 1.75, "–°—É–º–∞": 30, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚úÖ –ü–µ—á–µ–ª–∏–≤—à",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "AIK –µ —Å–∏–ª–µ–Ω –¥–æ–º–∞–∫–∏–Ω –∏ —Å–µ –Ω–∞–º–∏—Ä–∞ –≤—ä–≤ –≤—ä–∑—Ö–æ–¥, –¥–æ–∫–∞—Ç–æ Kalmar –µ –≤ —Å–ª–∞–±–∞ —Ñ–æ—Ä–º–∞ –∏ —Å –∫–∞–¥—Ä–æ–≤–∏ –ø—Ä–æ–±–ª–µ–º–∏."},
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Avai - Coritiba", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 2.00, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚ùå –ì—É–±–µ—â",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Avai –∑–∞–ø–∞–∑–≤–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç —É –¥–æ–º–∞ –∏ –∏–º–∞ –¥–æ–±—ä—Ä –±–∞–ª–∞–Ω—Å —Å—Ä–µ—â—É Coritiba."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Kairat - Olimpija", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ü–æ–¥ 2.5", "–ö–æ–µ—Ñ": 1.65, "–°—É–º–∞": 40, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "–ò –¥–≤–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞ –∏–≥—Ä–∞—è—Ç –¥–µ—Ñ–∞–Ω–∑–∏–≤–Ω–æ –≤ –µ–≤—Ä–æ—Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ, –æ—á–∞–∫–≤–∞ —Å–µ –ø—Ä–µ–¥–ø–∞–∑–ª–∏–≤ –ø–æ–¥—Ö–æ–¥."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Malmo - Saburtalo", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ù–∞–¥ 2.5", "–ö–æ–µ—Ñ": 1.60, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Malmo –∏–≥—Ä–∞–µ –æ—Ñ–∞–Ω–∑–∏–≤–Ω–æ —É –¥–æ–º–∞, –∞ Saburtalo –¥–æ–ø—É—Å–∫–∞ –≥–æ–ª–æ–≤–µ –ø–æ—á—Ç–∏ –≤—ä–≤ –≤—Å–µ–∫–∏ –º–∞—á."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Uruguay W - Argentina W", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 2.00, "–°—É–º–∞": 10, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
         "–û–±–æ—Å–Ω–æ–≤–∫–∞": "–£—Ä—É–≥–≤–∞–π –µ –≤ –ø–æ-–¥–æ–±—Ä–∞ —Ñ–æ—Ä–º–∞ –∏ –∏–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–æ —Å–ª–µ–¥ –ø—Ä–µ–¥–∏—à–Ω–∏ –ø–æ–±–µ–¥–∏."}
    ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'initial_bank' not in st.session_state:
    st.session_state.initial_bank = 340

if 'df' not in st.session_state:
    st.session_state.df = pd.DataFrame(get_real_predictions())

df = st.session_state.df

st.title("‚öΩ –ü—Ä–æ–≥–Ω–æ–∑–∏ –∏ –∞–Ω–∞–ª–∏–∑")

# –ê–∫—Ç—É–∞–ª–Ω–∞ –±–∞–Ω–∫–∞
bank = st.session_state.initial_bank
for _, row in df.iterrows():
    if row["–†–µ–∑—É–ª—Ç–∞—Ç"].startswith("‚úÖ"):
        bank += row["–°—É–º–∞"] * row["–ö–æ–µ—Ñ"] - row["–°—É–º–∞"]
    elif row["–†–µ–∑—É–ª—Ç–∞—Ç"].startswith("‚ùå"):
        bank -= row["–°—É–º–∞"]

st.subheader("üí∞ –ë–∞–Ω–∫–∞")
st.metric("–¢–µ–∫—É—â –±–∞–ª–∞–Ω—Å", f"{bank:.2f} –ª–≤")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ AgGrid
gb = GridOptionsBuilder.from_dataframe(df[["–î–∞—Ç–∞", "–ú–∞—á", "–ü—Ä–æ–≥–Ω–æ–∑–∞", "–ö–æ–µ—Ñ", "–°—É–º–∞", "–†–µ–∑—É–ª—Ç–∞—Ç"]])
gb.configure_selection("single", use_checkbox=True)
grid_options = gb.build()

# –°—Ç–∏–ª–æ–≤–µ —Å–ø–æ—Ä–µ–¥ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
cell_style_jscode = """
function(params) {
    if (params.value.includes("–ü–µ—á–µ–ª–∏–≤—à")) {
        return { 'backgroundColor': '#d4edda' };
    } else if (params.value.includes("–ì—É–±–µ—â")) {
        return { 'backgroundColor': '#f8d7da' };
    }
    return {};
}
"""

# –î–æ–±–∞–≤—è–º–µ —Å—Ç–∏–ª–∞ –∫—ä–º –∫–æ–ª–æ–Ω–∞—Ç–∞ "–†–µ–∑—É–ª—Ç–∞—Ç"
gb.configure_column("–†–µ–∑—É–ª—Ç–∞—Ç", cellStyle=cell_style_jscode)
grid_options = gb.build()

st.subheader("üìã –ü—Ä–æ–≥–Ω–æ–∑–∏")
grid_response = AgGrid(
    df,
    gridOptions=grid_options,
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    height=300,
    allow_unsafe_jscode=True,
    fit_columns_on_grid_load=True
)

selected = grid_response['selected_rows']

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ–±–æ—Å–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–±–æ—Ä
if selected:
    row = selected[0]
    st.subheader(f"üß† –û–±–æ—Å–Ω–æ–≤–∫–∞ –∑–∞ {row['–ú–∞—á']}")
    st.markdown(f"""
    - üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}
    - üéØ –ü—Ä–æ–≥–Ω–æ–∑–∞: **{row['–ü—Ä–æ–≥–Ω–æ–∑–∞']}**
    - üí∏ –ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç: {row['–ö–æ–µ—Ñ']}
    - üí∞ –ó–∞–ª–æ–≥: {row['–°—É–º–∞']} –ª–≤
    - üìà –†–µ–∑—É–ª—Ç–∞—Ç: {row['–†–µ–∑—É–ª—Ç–∞—Ç']}
    - üìä –û–±–æ—Å–Ω–æ–≤–∫–∞:
    > {row['–û–±–æ—Å–Ω–æ–≤–∫–∞']}
    """)
else:
    st.info("–ò–∑–±–µ—Ä–∏ –º–∞—á –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞, –∑–∞ –¥–∞ –≤–∏–¥–∏—à –ø–æ–¥—Ä–æ–±–Ω–∞ –æ–±–æ—Å–Ω–æ–≤–∫–∞.")

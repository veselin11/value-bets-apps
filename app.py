import streamlit as st
import pandas as pd
from datetime import date, timedelta

# –î–Ω–µ—à–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏, –ø–æ–¥–≥–æ—Ç–≤–µ–Ω–∏ –æ—Ç ChatGPT
def get_today_predictions():
    today = str(date.today())
    return [
        {
            "–î–∞—Ç–∞": today,
            "–ú–∞—á": "Shamrock Rovers - Vikingur Reykjavik",
            "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ù–∞–¥ 2.5",
            "–ö–æ–µ—Ñ": 1.87,
            "–°—É–º–∞": 30,
            "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
            "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Shamrock –∏–º–∞—Ç 8 –≥–æ–ª–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 –¥–æ–º–∞–∫–∏–Ω—Å—Ç–≤–∞. Vikingur –∏–≥—Ä–∞—è—Ç –æ—Ç–∫—Ä–∏—Ç–æ. –û—á–∞–∫–≤–∞ —Å–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–µ–Ω –º–∞—á."
        },
        {
            "–î–∞—Ç–∞": today,
            "–ú–∞—á": "Ferencv√°ros - The New Saints",
            "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ü—ä—Ä–≤–æ –ø–æ–ª—É–≤—Ä–µ–º–µ 1",
            "–ö–æ–µ—Ñ": 1.91,
            "–°—É–º–∞": 20,
            "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
            "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Ferencv√°ros –ø–æ–≤–µ–∂–¥–∞—Ç —Ä–∞–Ω–æ –≤ –ø–æ–≤–µ—á–µ—Ç–æ –¥–æ–º–∞–∫–∏–Ω—Å—Ç–≤–∞. –ì–æ—Å—Ç–∏—Ç–µ –¥–æ–ø—É—Å–∫–∞—Ç –≥–æ–ª–æ–≤–µ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ."
        },
        {
            "–î–∞—Ç–∞": today,
            "–ú–∞—á": "LDU Quito - Deportivo Cuenca",
            "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1 –∏ –ù–∞–¥ 1.5",
            "–ö–æ–µ—Ñ": 2.10,
            "–°—É–º–∞": 20,
            "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ",
            "–û–±–æ—Å–Ω–æ–≤–∫–∞": "LDU —Å–∏–ª–Ω–∏ —É –¥–æ–º–∞, –º–Ω–æ–≥–æ –≥–æ–ª–æ–≤–µ. Cuenca —Å–ª–∞–±–∏ –Ω–∞–≤—ä–Ω, –¥–æ–ø—É—Å–∫–∞—Ç —Å—Ä–µ–¥–Ω–æ –ø–æ 2 –≥–æ–ª–∞."
        }
    ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞
if 'initial_bank' not in st.session_state:
    st.session_state.initial_bank = 300

if 'df' not in st.session_state:
    st.session_state.df = pd.DataFrame([])

# –ó–∞–≥–ª–∞–≤–∏–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("‚öΩ –ü—Ä–æ–≥–Ω–æ–∑–∏ –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")

# –ë—É—Ç–æ–Ω –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏
if st.button("üí° –ó–∞—Ä–µ–¥–∏ –¥–Ω–µ—à–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏"):
    new_data = pd.DataFrame(get_today_predictions())
    st.session_state.df = pd.concat([st.session_state.df, new_data], ignore_index=True)

# –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞
df = st.session_state.df
bank = st.session_state.initial_bank
for _, row in df.iterrows():
    if row["–†–µ–∑—É–ª—Ç–∞—Ç"] == "‚úÖ –ü–µ—á–µ–ª–∏–≤—à":
        bank += row["–°—É–º–∞"] * row["–ö–æ–µ—Ñ"] - row["–°—É–º–∞"]
    elif row["–†–µ–∑—É–ª—Ç–∞—Ç"] == "‚ùå –ì—É–±–µ—â":
        bank -= row["–°—É–º–∞"]

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –±–∞–Ω–∫–∞
st.subheader("üí∞ –ë–∞–Ω–∫–∞")
st.metric("–¢–µ–∫—É—â –±–∞–ª–∞–Ω—Å", f"{bank:.2f} –ª–≤")

# –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∏ (–±–µ–∑ –æ–±–æ—Å–Ω–æ–≤–∫–∞)
st.subheader("üìã –í—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏")
display_df = df.drop(columns=["–û–±–æ—Å–Ω–æ–≤–∫–∞"])
df_styled = display_df.style.apply(
    lambda row: ['background-color: #d4edda' if row["–†–µ–∑—É–ª—Ç–∞—Ç"].startswith("‚úÖ") else
                 'background-color: #f8d7da' if row["–†–µ–∑—É–ª—Ç–∞—Ç"].startswith("‚ùå") else ''
                 for _ in row], axis=1)
st.dataframe(df_styled, use_container_width=True)

# –î–µ—Ç–∞–π–ª–Ω–∞ –æ–±–æ—Å–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–±–æ—Ä
st.subheader("üîé –í–∏–∂ –æ–±–æ—Å–Ω–æ–≤–∫–∞ –ø–æ –º–∞—á")
if not df.empty:
    match_options = [f"{row['–î–∞—Ç–∞']} | {row['–ú–∞—á']}" for _, row in df.iterrows()]
    selected = st.selectbox("–ò–∑–±–µ—Ä–∏ –º–∞—á", match_options)
    selected_row = df.iloc[match_options.index(selected)]
    st.markdown(f"""
    ### üß† –û–±–æ—Å–Ω–æ–≤–∫–∞ –∑–∞ **{selected_row['–ú–∞—á']}**
    - üìÖ –î–∞—Ç–∞: {selected_row['–î–∞—Ç–∞']}
    - üéØ –ü—Ä–æ–≥–Ω–æ–∑–∞: **{selected_row['–ü—Ä–æ–≥–Ω–æ–∑–∞']}**
    - üí∏ –ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç: {selected_row['–ö–æ–µ—Ñ']}
    - üí∞ –ó–∞–ª–æ–≥: {selected_row['–°—É–º–∞']} –ª–≤
    - üìà –†–µ–∑—É–ª—Ç–∞—Ç: {selected_row['–†–µ–∑—É–ª—Ç–∞—Ç']}
    - üìä –û–±–æ—Å–Ω–æ–≤–∫–∞:
    > {selected_row['–û–±–æ—Å–Ω–æ–≤–∫–∞']}
    """)
else:
    st.info("–ù—è–º–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏.")

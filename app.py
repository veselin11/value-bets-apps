import streamlit as st
import random
import datetime
import matplotlib.pyplot as plt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Å–∏—è—Ç–∞
if 'bankroll' not in st.session_state:
    st.session_state.bankroll = 500.0
if 'bets_history' not in st.session_state:
    st.session_state.bets_history = []
if 'todays_matches' not in st.session_state:
    st.session_state.todays_matches = [
        {"id": 1, "match": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ vs –•–µ—Ç–∞—Ñ–µ", "odds": 1.55, "prediction": "1", "league": "–õ–∞ –õ–∏–≥–∞", "date": str(datetime.date.today()), "selected": False, "marked": False},
        {"id": 2, "match": "–í–µ—Ä–æ–Ω–∞ vs –ë–æ–ª–æ–Ω—è", "odds": 2.10, "prediction": "2", "league": "–°–µ—Ä–∏—è –ê", "date": str(datetime.date.today()), "selected": False, "marked": False},
        {"id": 3, "match": "–ë—Ä—é–∂ vs –ê–Ω–¥–µ—Ä–ª–µ—Ö—Ç", "odds": 2.45, "prediction": "X", "league": "–ë–µ–ª–≥–∏–π—Å–∫–∞ –õ–∏–≥–∞", "date": str(datetime.date.today()), "selected": False, "marked": False},
        {"id": 4, "match": "–°–ª–∞–≤–∏—è –°–æ—Ñ–∏—è vs –õ–æ–∫–æ–º–æ—Ç–∏–≤ –ü–ª–æ–≤–¥–∏–≤", "odds": 2.00, "prediction": "1", "league": "–ë—ä–ª–≥–∞—Ä–∏—è", "date": str(datetime.date.today()), "selected": False, "marked": False}
    ]

st.title("üîÆ –ù–∞–π-–¥–æ–±—Ä–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–ª–æ–∑–∏")

# –ë–∞–Ω–∫–∞
st.markdown(f"### üí∞ –¢–µ–∫—É—â–∞ –±–∞–Ω–∫–∞: {st.session_state.bankroll:.2f} –ª–≤.")

# –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ
st.sidebar.header("–§–∏–ª—Ç—Ä–∏")
all_leagues = sorted(set(m['league'] for m in st.session_state.todays_matches))
selected_league = st.sidebar.selectbox("–ò–∑–±–µ—Ä–∏ –ª–∏–≥–∞", ["–í—Å–∏—á–∫–∏"] + all_leagues)
min_odds = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª–µ–Ω –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç", 1.0, 5.0, 1.0, 0.05)
show_marked = st.sidebar.checkbox("–ü–æ–∫–∞–∂–∏ —Å–∞–º–æ –º–∞—Ä–∫–∏—Ä–∞–Ω–∏ –º–∞—á–æ–≤–µ", False)

# –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏–∏
filtered = st.session_state.todays_matches
if selected_league != "–í—Å–∏—á–∫–∏":
    filtered = [m for m in filtered if m["league"] == selected_league]
filtered = [m for m in filtered if m["odds"] >= min_odds]
if show_marked:
    filtered = [m for m in filtered if m["marked"]]

st.subheader("–î–Ω–µ—à–Ω–∏ –º–∞—á–æ–≤–µ")

for match in filtered:
    cols = st.columns([3, 1, 1, 1, 1])
    cols[0].write(f"**{match['match']}** ({match['league']}) - –ü—Ä–æ–≥–Ω–æ–∑–∞: {match['prediction']} | –ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç: {match['odds']}")
    # –ú–∞—Ä–∫–∏—Ä–∞–π –º–∞—á
    marked = cols[1].checkbox("‚≠ê", value=match["marked"], key=f"mark_{match['id']}")
    match["marked"] = marked

    if not match["selected"]:
        amount = cols[2].number_input(f"–ó–∞–ª–æ–≥ (–ª–≤.)", min_value=1, max_value=int(st.session_state.bankroll), value=50, key=f"bet_amount_{match['id']}")
        prediction = cols[3].selectbox("–ü—Ä–æ–≥–Ω–æ–∑–∞", options=["1", "X", "2"], index=["1","X","2"].index(match["prediction"]), key=f"pred_{match['id']}")

        if cols[4].button("–ó–∞–ª–æ–∂–∏", key=f"bet_btn_{match['id']}"):
            if amount > st.session_state.bankroll:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–∞!")
            else:
                # –°–∏–º—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç (–∑–∞ —Ç–µ—Å—Ç)
                win = random.random() < 1 / match["odds"]
                result = "–ü–µ—á–∞–ª–±–∞" if win else "–ó–∞–≥—É–±–∞"
                if win:
                    profit = amount * (match["odds"] - 1)
                    st.session_state.bankroll += profit
                else:
                    st.session_state.bankroll -= amount

                match["selected"] = True
                match["prediction"] = prediction

                st.session_state.bets_history.append({
                    "id": match["id"],
                    "match": match["match"],
                    "prediction": prediction,
                    "odds": match["odds"],
                    "amount": amount,
                    "result": result,
                    "date": str(datetime.date.today())
                })
                st.success(f"{match['match']} - {result}! –¢–µ–∫—É—â–∞ –±–∞–Ω–∫–∞: {st.session_state.bankroll:.2f} –ª–≤.")

    else:
        st.write("‚ö†Ô∏è –í–µ—á–µ –∑–∞–ª–æ–∂–µ–Ω")

# –û—Ç–º—è–Ω–∞ –Ω–∞ –∑–∞–ª–æ–≥ –ø—Ä–µ–¥–∏ –∏–≥—Ä–∞
st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–ª–æ–∑–∏")
if st.session_state.bets_history:
    for bet in st.session_state.bets_history:
        cancel = st.button(f"–û—Ç–º–µ–Ω–∏ –∑–∞–ª–æ–≥: {bet['match']} ({bet['amount']} –ª–≤.)", key=f"cancel_{bet['id']}")
        if cancel:
            # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±–∞–Ω–∫–∞ —Å–∞–º–æ –∞–∫–æ –æ—â–µ –Ω—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç (—Ç—É–∫ –ø—Ä–∏–µ–º–∞–º–µ, —á–µ –∏–º–∞)
            st.session_state.bankroll += bet['amount'] if bet['result'] == "–ó–∞–≥—É–±–∞" else 0
            # –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–ª–æ–≥–∞
            st.session_state.bets_history = [b for b in st.session_state.bets_history if b['id'] != bet['id']]
            for m in st.session_state.todays_matches:
                if m['id'] == bet['id']:
                    m['selected'] = False
            st.experimental_rerun()
else:
    st.write("–í—Å–µ –æ—â–µ –Ω—è–º–∞ –∑–∞–ª–æ–∂–µ–Ω–∏ –º–∞—á–æ–≤–µ.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∑–∞–ª–æ–∑–∏—Ç–µ")

total_bets = len(st.session_state.bets_history)
wins = sum(1 for bet in st.session_state.bets_history if bet['result'] == "–ü–µ—á–∞–ª–±–∞")
losses = total_bets - wins
profit = st.session_state.bankroll - 500

st.write(f"- –û–±—â–æ –∑–∞–ª–æ–∑–∏: {total_bets}")
st.write(f"- –ü–µ—á–∞–ª–±–∏: {wins}")
st.write(f"- –ó–∞–≥—É–±–∏: {losses}")
st.write(f"- –û–±—â–∞ –ø–µ—á–∞–ª–±–∞/–∑–∞–≥—É–±–∞: {profit:.2f} –ª–≤.")

# –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –ø–µ—á–∞–ª–±–∞—Ç–∞/–∑–∞–≥—É–±–∞—Ç–∞ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ
st.subheader("–ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ")

dates = []
banks = []
current_bank = 500.0
dates.append(datetime.date.today())
banks.append(current_bank)

for bet in st.session_state.bets_history:
    if bet['result'] == "–ü–µ—á–∞–ª–±–∞":
        current_bank += bet['amount'] * (bet['odds'] - 1)
    else:
        current_bank -= bet['amount']
    dates.append(datetime.datetime.strptime(bet['date'], "%Y-%m-%d").date())
    banks.append(current_bank)

fig, ax = plt.subplots()
ax.plot(dates, banks, marker='o')
ax.set_xlabel("–î–∞—Ç–∞")
ax.set_ylabel("–ë–∞–Ω–∫–∞ (–ª–≤.)")
ax.set_title("–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ")
st.pyplot(fig)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –ø–æ–¥–±–æ—Ä –Ω–∞ –º–∞—á–æ–≤–µ —Å high value bets (–ø—Ä–∏–º–µ—Ä–Ω–æ)
st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω –ø–æ–¥–±–æ—Ä –Ω–∞ –º–∞—á–æ–≤–µ (—Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏)")

def is_value_bet(odds, win_prob_estimate):
    # –ê–∫–æ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç—ä—Ç –µ –ø–æ-–≥–æ–ª—è–º –æ—Ç –æ–±—Ä–∞—Ç–Ω–∞—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç = value bet
    return odds > 1 / win_prob_estimate

# –ü—Ä–∏–º–µ—Ä–Ω–∏ win_prob_estimates (–º–æ–∂–µ—à –¥–∞ –ø–æ–¥–æ–±—Ä–∏—à —Å ML/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
prob_estimates = {
    "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ vs –•–µ—Ç–∞—Ñ–µ": 0.7,
    "–í–µ—Ä–æ–Ω–∞ vs –ë–æ–ª–æ–Ω—è": 0.4,
    "–ë—Ä—é–∂ vs

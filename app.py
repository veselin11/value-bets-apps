import streamlit as st
import pandas as pd
from datetime import date, timedelta
import matplotlib.pyplot as plt
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
from st_aggrid.shared import JsCode

# -- –ü—Ä–∏–º–µ—Ä–Ω–∏ —Ä–µ–∞–ª–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏
def load_predictions():
    return [
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Bodo/Glimt - Ruzomberok", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 1.55, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "2:0", "–°—Ç–∞—Ç—É—Å": "–ü–µ—á–µ–ª–∏", "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Bodo –µ —Å –ø–æ-—Å–∏–ª–µ–Ω —Å—ä—Å—Ç–∞–≤ –∏ –¥–æ–º–∞–∫–∏–Ω—Å—Ç–≤–æ—Ç–æ –µ —Ä–µ—à–∞–≤–∞—â–æ."},
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Ava√≠ - Cear√°", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ì–ì", "–ö–æ–µ—Ñ": 1.95, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "0:1", "–°—Ç–∞—Ç—É—Å": "–ì—É–±–∏", "–û–±–æ—Å–Ω–æ–≤–∫–∞": "–ò –¥–≤–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞ —á–µ—Å—Ç–æ –±–µ–ª–µ–∂–∞—Ç. –û—á–∞–∫–≤–∞ —Å–µ —Ä–∞–∑–º—è–Ω–∞ –Ω–∞ –≥–æ–ª–æ–≤–µ."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Kairat - Olimpija", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ü–æ–¥ 2.5", "–ö–æ–µ—Ñ": 1.65, "–°—É–º–∞": 40, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ", "–°—Ç–∞—Ç—É—Å": "", "–û–±–æ—Å–Ω–æ–≤–∫–∞": "–î–≤–∞ –¥–µ—Ñ–∞–Ω–∑–∏–≤–Ω–∏ –æ—Ç–±–æ—Ä–∞. –ú–∞–ª–∫–æ –≥–æ–ª–æ–≤–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –∏–º —Å—Ä–µ—â–∏."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Malmo - Saburtalo", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ù–∞–¥ 2.5", "–ö–æ–µ—Ñ": 1.60, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ", "–°—Ç–∞—Ç—É—Å": "", "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Malmo –±–µ–ª–µ–∂–∏ –º–Ω–æ–≥–æ —É –¥–æ–º–∞, Saburtalo –¥–æ–ø—É—Å–∫–∞ –≥–æ–ª–æ–≤–µ."},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Uruguay W - Argentina W", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 2.00, "–°—É–º–∞": 10, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ", "–°—Ç–∞—Ç—É—Å": "", "–û–±–æ—Å–Ω–æ–≤–∫–∞": "Uruguay –µ –≤ –ø–æ-–¥–æ–±—Ä–∞ —Ñ–æ—Ä–º–∞ –∏ –¥–æ–º–∞–∫–∏–Ω—Å—Ç–≤–æ—Ç–æ –µ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–æ."},
    ]

# -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'bank' not in st.session_state:
    st.session_state.bank = 340
if 'predictions' not in st.session_state:
    st.session_state.predictions = load_predictions()

st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ —Å–ø–æ—Ä—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏")
st.subheader("üéØ –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∏")

df = pd.DataFrame(st.session_state.predictions)

# -- JavaScript —Å—Ç–∏–ª –∑–∞ –∫–æ–ª–æ–Ω–∞ "–°—Ç–∞—Ç—É—Å"
cell_style_jscode = JsCode("""
function(params) {
    if (params.value === '–ü–µ—á–µ–ª–∏') {
        return {backgroundColor: '#d4f7dc'};
    } else if (params.value === '–ì—É–±–∏') {
        return {backgroundColor: '#fddddd'};
    } else {
        return {};
    }
}
""")

# -- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
gb = GridOptionsBuilder.from_dataframe(df)
gb.configure_selection("single")
gb.configure_columns(["–î–∞—Ç–∞", "–ú–∞—á", "–ü—Ä–æ–≥–Ω–æ–∑–∞", "–ö–æ–µ—Ñ", "–°—É–º–∞", "–†–µ–∑—É–ª—Ç–∞—Ç", "–°—Ç–∞—Ç—É—Å"], editable=False)
gb.configure_column("–°—Ç–∞—Ç—É—Å", cellStyle=cell_style_jscode)
grid_options = gb.build()

response = AgGrid(
    df,
    gridOptions=grid_options,
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    allow_unsafe_jscode=True,
    height=300,
    fit_columns_on_grid_load=True
)

# -- –û–±–æ—Å–Ω–æ–≤–∫–∞
selected = response['selected_rows']
if selected:
    match = selected[0]
    st.markdown("---")
    st.subheader(f"üìå –û–±–æ—Å–Ω–æ–≤–∫–∞ –∑–∞ –º–∞—á–∞: {match['–ú–∞—á']}")
    st.info(match['–û–±–æ—Å–Ω–æ–≤–∫–∞'])

# -- –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–µ—á–∞–ª–±–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–µ—á–∞–ª–±–∏")
df['–ü–µ—á–∞–ª–±–∞'] = df.apply(lambda row: (row['–ö–æ–µ—Ñ'] * row['–°—É–º–∞'] - row['–°—É–º–∞']) if row['–°—Ç–∞—Ç—É—Å'] == '–ü–µ—á–µ–ª–∏' else (-row['–°—É–º–∞'] if row['–°—Ç–∞—Ç—É—Å'] == '–ì—É–±–∏' else 0), axis=1)
df['–ù–∞—Ç—Ä—É–ø–∞–Ω–∞ –±–∞–Ω–∫–∞'] = st.session_state.bank + df['–ü–µ—á–∞–ª–±–∞'].cumsum()

fig, ax = plt.subplots()
ax.plot(df['–î–∞—Ç–∞'], df['–ù–∞—Ç—Ä—É–ø–∞–Ω–∞ –±–∞–Ω–∫–∞'], marker='o', linestyle='-')
ax.set_title("–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞")
ax.set_ylabel("–õ–µ–≤–∞")
ax.set_xlabel("–î–∞—Ç–∞")
st.pyplot(fig)

# -- –§–∏–Ω–∞–ª–Ω–∞ –±–∞–Ω–∫–∞
st.subheader("üí∞ –ê–∫—Ç—É–∞–ª–Ω–∞ –±–∞–Ω–∫–∞")
bank_total = st.session_state.bank + df['–ü–µ—á–∞–ª–±–∞'].sum()
st.metric("–¢–µ–∫—É—â–∞ –±–∞–Ω–∫–∞", f"{bank_total:.2f} –ª–≤")

import streamlit as st
import pandas as pd
from datetime import date, timedelta
import matplotlib.pyplot as plt

# –§–∏–∫—Å–∏—Ä–∞–Ω–∏ —Ä–µ–∞–ª–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç ChatGPT (–º–æ–∂–µ—à –¥–∞ –¥–æ–±–∞–≤—è—à –æ—â–µ)
def get_chatgpt_predictions():
    return [
        # –í—á–µ—Ä–∞—à–Ω–∏ (—Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∏)
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Elfsborg - Molde", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ì–ì", "–ö–æ–µ—Ñ": 1.85, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚úÖ –ü–µ—á–µ–ª–∏–≤—à"},
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "AIK - Kalmar", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 1.75, "–°—É–º–∞": 30, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚úÖ –ü–µ—á–µ–ª–∏–≤—à"},
        {"–î–∞—Ç–∞": str(date.today() - timedelta(days=1)), "–ú–∞—á": "Avai - Coritiba", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 2.00, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "‚ùå –ì—É–±–µ—â"},

        # –î–Ω–µ—à–Ω–∏ (–æ—á–∞–∫–≤–∞–Ω–∏)
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Kairat - Olimpija", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ü–æ–¥ 2.5", "–ö–æ–µ—Ñ": 1.65, "–°—É–º–∞": 40, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ"},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Malmo - Saburtalo", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "–ù–∞–¥ 2.5", "–ö–æ–µ—Ñ": 1.60, "–°—É–º–∞": 20, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ"},
        {"–î–∞—Ç–∞": str(date.today()), "–ú–∞—á": "Uruguay W - Argentina W", "–ü—Ä–æ–≥–Ω–æ–∑–∞": "1", "–ö–æ–µ—Ñ": 2.00, "–°—É–º–∞": 10, "–†–µ–∑—É–ª—Ç–∞—Ç": "–û—á–∞–∫–≤–∞ —Å–µ"},
    ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'initial_bank' not in st.session_state:
    st.session_state.initial_bank = 340

if 'bets' not in st.session_state:
    st.session_state.bets = []

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìä –ê—Ä—Ö–∏–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏")

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∞–ª–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏
if st.button("üîÑ –ó–∞—Ä–µ–¥–∏ –Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏"):
    new_preds = get_chatgpt_predictions()
    st.session_state.bets = new_preds  # –ü—Ä–µ–∑–∞–ø–∏—Å–≤–∞–º–µ
    st.success("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ —Å–∞ –ø—Ä–µ–∑–∞—Ä–µ–¥–µ–Ω–∏!")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å –æ—Ü–≤–µ—Ç—è–≤–∞–Ω–µ
if st.session_state.bets:
    df = pd.DataFrame(st.session_state.bets)

    def highlight_result(row):
        if row['–†–µ–∑—É–ª—Ç–∞—Ç'] == "‚úÖ –ü–µ—á–µ–ª–∏–≤—à":
            return ['background-color: #e6ffe6'] * len(row)
        elif row['–†–µ–∑—É–ª—Ç–∞—Ç'] == "‚ùå –ì—É–±–µ—â":
            return ['background-color: #ffe6e6'] * len(row)
        return [''] * len(row)

    st.subheader("üìã –ê—Ä—Ö–∏–≤ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏")
    st.dataframe(df.style.apply(highlight_result, axis=1), use_container_width=True)

    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –¥–Ω–µ–≤–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞
    bank = st.session_state.initial_bank
    history = []
    for i, row in df.iterrows():
        result = row['–†–µ–∑—É–ª—Ç–∞—Ç']
        amount = row['–°—É–º–∞']
        coef = row['–ö–æ–µ—Ñ']
        if result == "‚úÖ –ü–µ—á–µ–ª–∏–≤—à":
            win = amount * coef
            bank += win - amount
        elif result == "‚ùå –ì—É–±–µ—â":
            bank -= amount
        history.append({"–î–∞—Ç–∞": row['–î–∞—Ç–∞'], "–ë–∞–Ω–∫–∞": round(bank, 2)})

    # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ—Ç–æ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞")
    chart_df = pd.DataFrame(history)
    chart_df['–î–∞—Ç–∞'] = pd.to_datetime(chart_df['–î–∞—Ç–∞'])
    chart_df = chart_df.sort_values("–î–∞—Ç–∞")
    st.line_chart(chart_df.set_index("–î–∞—Ç–∞")["–ë–∞–Ω–∫–∞"])

    # –§–∏–Ω–∞–ª–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞
    st.subheader("üí∞ –ê–∫—Ç—É–∞–ª–Ω–∞ –±–∞–Ω–∫–∞")
    st.metric("–ë–∞–ª–∞–Ω—Å", f"{bank:.2f} –ª–≤")

else:
    st.info("–ù–∞—Ç–∏—Å–Ω–∏ –±—É—Ç–æ–Ω–∞, –∑–∞ –¥–∞ –∑–∞—Ä–µ–¥–∏—à –ø—Ä–æ–≥–Ω–æ–∑–∏—Ç–µ.")
